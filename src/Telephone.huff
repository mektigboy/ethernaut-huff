/// @title Telephone
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////

#define function owner() view returns (address)
#define function changeOwner(address) nonpayable returns ()

///////////////
/// STORAGE ///
///////////////

#define constant OWNER_SLOT = FREE_STORAGE_POINTER()

//////////////////////
/// CONTRACT LOGIC ///
//////////////////////

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner
#define macro OWNER() = takes (0) returns (0) {
    // Load the owner
    [OWNER_SLOT]                    // [slot]
    sload                           // [owner]
    0x00                            // [0, owner]       
    mstore                          // []

    // Return the owner
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Change the owner of the contract
/// @param {owner} [address] - The new owner
#define macro CHANGE_OWNER() = takes (0) returns (0) {
    // Check that the `msg.sender` is equal to `tx.origin`
    origin                         // [tx.origin]   
    caller                         // [tx.origin, msg.sender]
    eq                             // [tx.origin == msg.sender]
    is_equal
    jumpi

    // Set the owner
    0x04                            // [4]
    calldataload                    // [owner]
    [OWNER_SLOT]                    // [slot, owner]
    sstore

    stop

    is_equal:
        0x00                        // [0, tx.origin == msg.sender]
        0x00                        // [0, 0, tx.origin == msg.sender]
        revert
}

///////////////////
/// CONSTRUCTOR ///
///////////////////

/// @notice Constructor
/// @dev Sets `msg.sender` as the owner
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy the owner to memory
    0x20                            // [32]
    0x20                            // [64, 32]
    codesize                        // [64, 64, 32]
    sub                             // [0, 32]
    0x00                            // [0, 0, 32]
    codecopy                        // []

    // Set the owner
    0x00                            // [0]
    mload                           // [owner]
    [OWNER_SLOT]                    // [slot, owner]
    sstore                          // []
}

////////////////////////
/// MAIN ENTRY POINT ///
////////////////////////

/// @notice Main entry point
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00                            // [0]
    calldataload                    // [sig, 0]
    0xE0                            // [224, sig, 0]
    shr                             // [sel, 0]

    // Jump to the function depending on the selector
    dup1 __FUNC_SIG(owner) eq ownerJump jumpi
    dup1 __FUNC_SIG(changeOwner) eq changeOwnerJump jumpi

    // Revert if the function is not found
    0x00                            // [0]
    0x00                            // [0, 0]
    revert

    // Function jump destinations
    ownerJump:
        OWNER()

    changeOwnerJump:
        CHANGE_OWNER()
}
