/// @title Fallback
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////

#define function contributions(address) nonpayable returns (uint256)
#define function owner() nonpayable returns (address)
#define function contribute() payable returns ()
#define function getContribution() nonpayable returns (uint256)
#define function withdraw() nonpayable returns ()

///////////////
/// STORAGE ///
///////////////

#define constant OWNER_SLOT = FREE_STORAGE_POINTER()

/////////////////
/// MODIFIERS ///
/////////////////

/// @notice Modifier to check if the caller is the owner
/// @dev Reverts if the caller is not the owner
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller                          // [msg.sender]
    [OWNER_SLOT]                    // [slot, msg.sender]
    sload                           // [owner, msg.sender]
    eq                              // [bool]
    authed                          // []
    jumpi

    // Revert if the caller is not the owner
    0x00                            // [0]
    0x00                            // [0, 0]
    revert

    authed:                    
}

//////////////
/// MACROS ///
//////////////

/// @notice Get the slot from a key
/// @param {key} [bytes32] - The key
/// @return {slot} [bytes32] - The slot
#define macro GET_SLOT_FROM_KEY(pointer) = takes(1) returns (1) {
    // Input stack: [key]
    // Load the data into memory and hash it, while preserving the memory location
    <pointer>                       // [<pointer>, key]
    mstore                          // []

    // Hash the data, generating a key
    0x20                            // [32]
    <pointer>                       // [<pointer>, 32]
    sha3                            // [slot]
}

//////////////////////
/// CONTRACT LOGIC ///
//////////////////////

/// @notice Get the contribution of an address
/// @param {contributor} [address] - The address of the contributor
/// @return {contribution} [uint256] - The contribution
#define macro CONTRIBUTIONS() = takes (0) returns (0) {
    0x04                            // [4]
    calldataload                    // [key]
    GET_SLOT_FROM_KEY(0x00)         // [slot]
    sload                           // [contribution]
    0x00                            // [0, contribution]
    mstore                          // []

    // Return the contribution
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner of the contract
#define macro OWNER() = takes (0) returns (0) {
    [OWNER_SLOT]                    // [slot]
    sload                           // [owner]
    0x00                            // [0, owner]       
    mstore                          // []

    // Return the owner
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Contribute to the contract
/// @dev Reverts if `msg.value` is less than 0.001 ETH
#define macro CONTRIBUTE() = takes (0) returns (0) {
    callvalue                       // [msg.value]
    dup1                            // [msg.value, msg.value]
    0x38d7ea4c68000                 // [100000000000000000, msg.value, msg.value]
    gt                              // [bool, msg.value] - (0.001 ETH > msg.value)
    greater_than                    // [msg.value]
    jumpi                           

    caller                          // [msg.sender, msg.value]
    GET_SLOT_FROM_KEY(0x00)         // [slot, msg.value]
    sstore                          // []

    callvalue                       // [msg.value]
    [OWNER_SLOT]                    // [slot, msg.value]
    sload                           // [owner, msg.value]
    GET_SLOT_FROM_KEY(0x00)         // [slot, msg.value]
    sload                           // [contribution, msg.value] - (contribution of the owner < contribution of `msg.sender`)
    lt                              // [bool]
    less_than                       // []
    jumpi

    stop

    // Revert if `msg.value` is less than 0.001 ETH
    greater_than:
        0x00                        // [0]
        0x00                        // [0, 0]
        revert

    // If the contribution of `msg.sender` is more than the contribution of the owner, set the owner to `msg.sender`
    less_than:
        caller                      // [msg.sender]
        [OWNER_SLOT]                // [slot, msg.sender]
        sstore                      // []   

        stop
}

/// @notice Get the contribution of `msg.sender`
/// @return {contribution} [uint256] - The contribution
#define macro GET_CONTRIBUTION() = takes (0) returns (0) {
    caller                          // [msg.sender]
    GET_SLOT_FROM_KEY(0x00)         // [slot]
    sload                           // [contribution]
    0x00                            // [0, contribution]
    mstore                          // []

    // Return the contribution
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Withdraw the balance of the contract
/// @dev Reverts if the caller is not the owner
#define macro WITHDRAW() = takes (0) returns (0)  {
    ONLY_OWNER()

    0x00                            // [0]
    0x00                            // [0, 0]
    0x00                            // [0, 0, 0]
    0x00                            // [0, 0, 0, 0]
    address                         // [address, 0, 0, 0, 0]
    balance                         // [balance, 0, 0, 0, 0]
    [OWNER_SLOT]                    // [slot, balance, 0, 0, 0, 0]
    sload                           // [owner, balance, 0, 0, 0, 0]
    gas                             // [gas, owner, balance, 0, 0, 0, 0]
    call                            // [bool]      
    iszero                          // [bool]
    is_zero                         // []
    jumpi

    stop

    is_zero:
        0x00                        // [0]
        0x00                        // [0, 0]
        revert                      
}

///////////////////
/// CONSTRUCTOR ///
///////////////////

/// @notice Constructor
/// @dev Sets `msg.sender` as the owner
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x20                            // [size] - Byte size to copy  
    0x20                            // [offset, size] - Offset in the code to copy from  
    codesize                        // [size, offset, size] - Byte size of the code
    sub                             // [size]
    0x00                            // [0, size] - Offset in memory to copy to
    codecopy                        // []

    0x00                            // [0]
    mload                           // [owner]
    [OWNER_SLOT]                    // [slot, owner]
    sstore                          // []

    0x3e8                           // [1000]
    0xde0b6b3a7640000               // [1000000000000000000, 1000]
    mul                             // [1000000000000000000000] - 1000000000000000000 * 1000 = 1000 ETH
    0x00                            // [0, 1000000000000000000000]
    mload                           // [owner, 1000000000000000000000]
    GET_SLOT_FROM_KEY(0x00)         // [slot, 1000000000000000000000]
    sstore                          // []
}

////////////////////////
/// MAIN ENTRY POINT ///
////////////////////////

/// @notice Main entry point
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00                            // [0]
    calldataload                    // [sig, 0]
    0xE0                            // [224, sig, 0]
    shr                             // [sel, 0]

    // Jump to the function depending on the selector
    dup1 __FUNC_SIG(contributions) eq contributionsJump jumpi
    dup1 __FUNC_SIG(owner) eq ownerJump jumpi
    dup1 __FUNC_SIG(contribute) eq contributeJump jumpi
     dup1 __FUNC_SIG(getContribution) eq getContributionJump jumpi
    dup1 __FUNC_SIG(withdraw) eq withdrawJump jumpi

    // Jump into the receive function if `msg.value` is greater than 0
    // and the contribution of `msg.sender` is greater than 0
    0x00                            // [0]
    callvalue                       // [msg.value, 0]
    gt                              // [bool]
    0x00                            // [0, bool]
    caller                          // [msg.sender, 0, bool]
    GET_SLOT_FROM_KEY(0x00)         // [slot, 0, bool]
    sload                           // [contribution, 0, bool]
    gt                              // [bool, bool]
    and                             // [bool]
    receive                         // []
    jumpi

    // Revert if the function is not found
    0x00                            // [0]
    0x00                            // [0, 0]
    revert                      

    contributionsJump:
        CONTRIBUTIONS()

    ownerJump:
        OWNER()

    contributeJump:
        CONTRIBUTE()

    getContributionJump:
        GET_CONTRIBUTION()

    withdrawJump:
        WITHDRAW()

    receive:
        RECEIVE()
}

///////////////
/// RECEIVE ///
///////////////

/// @notice Receive function
#define macro RECEIVE() = {
    caller                      // [msg.sender]
    [OWNER_SLOT]                // [slot, msg.sender]
    sstore                      // []   
}
