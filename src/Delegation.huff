/// @title Delegation
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////

#define function owner() view returns (address)
#define function pwn() nonpayable returns ()

///////////////
/// STORAGE ///
///////////////

#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant DELEGATE_SLOT = FREE_STORAGE_POINTER()

//////////////////////
/// CONTRACT LOGIC ///
//////////////////////

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner
#define macro OWNER() = takes (0) returns (0) {
    [OWNER_SLOT]                    // [slot]
    sload                           // [owner]
    0x00                            // [0, owner]       
    mstore                          // []

    // Return the owner
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Pwn the contract
/// @dev Sets `msg.sender` as the owner
#define macro PWN() = takes (0) returns (0) {
    caller                          // [caller]
    [OWNER_SLOT]                    // [slot, caller]
    sstore                          // []
}

///////////////////
/// CONSTRUCTOR ///
///////////////////

/// @notice Constructor
/// @param {delegateAddress} [address] - The delegate
/// @dev Sets `msg.sender` as the owner
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Copy the owner to memory
    0x20                            // [32]
    0x40                            // [64, 32]
    codesize                        // [64, 64, 32]
    sub                             // [0, 32]
    0x00                            // [0, 0, 32]
    codecopy                        // []
    
    // Copy the delegate to memory
    0x20                            // [32] 
    0x20                            // [32, 32]
    codesize                        // [64, 32, 32]
    sub                             // [32, 32]
    0x20                            // [0, 32, 32]
    codecopy                        

    // Set the owner
    0x00                            // [0]
    mload                           // [owner]
    [OWNER_SLOT]                    // [slot, owner]
    sstore                          // [owner]

    // Set the delegate
    0x20                            // [32]
    mload                                 
    [DELEGATE_SLOT]                 // [slot, delegateAddress]
    sstore                          // []
}

////////////////////////
/// MAIN ENTRY POINT ///
////////////////////////

/// @notice Main entry point
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00                            // [0]
    calldataload                    // [sig]
    0xE0                            // [224, sig, 0]
    shr                             // [sel, 0]

    // Jump to the function depending on the selector
    dup1 __FUNC_SIG(owner) eq ownerJump jumpi

    FALLBACK()

    // Revert if the function is not found
    0x00                            // [0]
    0x00                            // [0, 0]
    revert                          // []

    // Function jump destinations
    ownerJump:
        OWNER()
}

////////////////
/// FALLBACK ///
////////////////

/// @notice Fallback function
#define macro FALLBACK() = {
    // Copy the delegate to memory
    [DELEGATE_SLOT]                 // [slot]
    sload                           // [delegate]
    calldatasize                    // [calldatasize, delegate]]    
    0x00                            // [0, calldatasize, delegate]
    dup1                            // [0, 0, calldatasize, delegate]
    calldatacopy                    // [delegate]

    // Call the delegate
    0x00                            // [0, delegate]
    dup1                            // [0, 0, delegate]
    calldatasize                    // [calldatasize, 0, 0, delegate]
    dup2                            // [0, calldatasize, 0, 0, delegate]
    dup5                            // [delegate, 0, calldatasize, 0, 0, delegate]
    gas                             // [gas, delegate, 0, calldatasize, 0, 0, delegate]
    delegatecall                    // [success, delegate]

    // Copy the returned data
    returndatasize                  // [rds, success, delegate]
    0x00                            // [0, rds, success, delegate]
    dup1                            // [0, 0, rds, success, delegate]
    returndatacopy                  // [success, delegate]

    // Revert if the delegatecall failed
    iszero                          // [delagate]
    delegatecall_failed               // [delegate]
    jumpi

    // Return the returned data
    returndatasize
    0x00 
    return

    delegatecall_failed:
        returndatasize 0x00 revert
}
