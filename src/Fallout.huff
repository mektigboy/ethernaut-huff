/// @title Fallout
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////

#define function allocations(address) nonpayable returns (uint256)
#define function owner() nonpayable returns (address)
#define function Fal1out() payable returns ()
#define function allocate() payable returns ()
#define function sendAllocation(address) nonpayable returns ()
#define function collectAllocations() nonpayable returns ()
#define function allocatorBalance() view returns (uint256)

///////////////
/// STORAGE ///
///////////////

#define constant OWNER_SLOT = FREE_STORAGE_POINTER()

/////////////////
/// MODIFIERS ///
/////////////////

/// @notice Modifier to check if the caller is the owner
/// @dev Reverts if the caller is not the owner
#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller                          // [msg.sender]
    [OWNER_SLOT]                    // [slot, msg.sender]
    sload                           // [owner, msg.sender]
    eq                              // [bool]
    authed                          // []
    jumpi

    // Revert if the caller is not the owner
    0x00                            // [0]
    0x00                            // [0, 0]
    revert

    authed:                    
}

//////////////
/// MACROS ///
//////////////

/// @notice Get the slot from a key
/// @param {key} [bytes32] - The key
/// @return {slot} [bytes32] - The slot
#define macro GET_SLOT_FROM_KEY(pointer) = takes(1) returns (1) {
    // Input stack: [key]
    // Load the data into memory and hash it, while preserving the memory location
    <pointer>                       // [<pointer>, key]
    mstore                          // []

    // Hash the data, generating a key
    0x20                            // [32]
    <pointer>                       // [<pointer>, 32]
    sha3                            // [slot]
}

//////////////////////
/// CONTRACT LOGIC ///
////////////////////// 

/// @notice Get the allocation of an address
/// @param {key} [bytes32] - The key
/// @return {allocation} [uint256] - The allocation
#define macro ALLOCATIONS() = takes (0) returns (0) {
    0x04 calldataload               // [key]
    GET_SLOT_FROM_KEY(0x00)         // [slot, key]
    sload                           // [contribution]
    0x00                            // [0, contribution]
    mstore                          // []

    // Return the contribution
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Get the owner of the contract
/// @return {owner} [address] - The owner of the contract
#define macro OWNER() = takes (0) returns (0) {
    [OWNER_SLOT]                    // [slot]
    sload                           // [owner]
    0x00                            // [0, owner]       
    mstore                          // []

    // Return the owner
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Fal1out function that is being used as the constructor
/// @dev Sets the owner of the contract to `msg.sender`
#define macro FAL1OUT() = takes (0) returns (0) {
    caller                          // [msg.sender]
    [OWNER_SLOT]                    // [slot, msg.sender]
    sstore                          // []

    callvalue                       // [msg.value]
    caller                          // [msg.sender, msg.value]
    GET_SLOT_FROM_KEY(0x00)         // [slot, msg.value]     
    sstore                          // []           
}

/// @notice Allocate funds to `msg.sender`
#define macro ALLOCATE() = takes (0) returns (0) {
    caller                          // [msg.sender]
    GET_SLOT_FROM_KEY(0x00)         // [slot]
    dup1                            // [slot, slot]
    sload                           // [allocation, slot]
    callvalue                       // [msg.value, allocation, slot]
    add                             // [allocation, slot] 
    swap1                           // [slot, allocation]     
    sstore                          // []

    stop
}

/// @notice Send the allocation of an address to the address
/// @param {allocator} [address] - The address to send the allocation to
#define macro SEND_ALLOCATION() = takes (0) returns (0) {    
    0x04                            // [4]
    calldataload                    // [allocator]
    dup1                            // [allocator, allocator]
    GET_SLOT_FROM_KEY(0x00)         // [slot, allocator]
    sload                           // [allocation, allocator]
    dup1                            // [allocation, allocation, allocator]
    iszero                          // [bool, allocation, allocator]
    is_zero                         // [allocation, allocator]
    jumpi

    0x00                            // [0, allocation, allocator]
    0x00                            // [0, 0, allocation, allocator]
    0x00                            // [0, 0, 0, allocation, allocator]
    0x00                            // [0, 0, 0, 0, allocation, allocator]
    swap4                           // [allocation, 0, 0, 0, 0, allocator]
    swap1                           // [0, allocation, 0, 0, 0, allocator]
    swap5                           // [allocator, allocation, 0, 0, 0, 0]
    gas                             // [gas, allocator, allocation, 0, 0, 0, 0]
    call                            // [bool]
    iszero                          // [bool]
    is_zero                         // []
    jumpi

    stop

    // Revert if allocation is 0
    // Revert if the call failed
    is_zero:
        0x00                        // [0]
        0x00                        // [0, 0]
        revert
}

/// @notice Collect all allocations
/// @dev Reverts if the caller is not the owner
#define macro COLLECT_ALLOCATIONS() = takes (0) returns (0) {
    ONLY_OWNER()

    0x00                            // [0]
    0x00                            // [0, 0]
    0x00                            // [0, 0, 0]
    0x00                            // [0, 0, 0, 0]
    address                         // [address, 0, 0, 0, 0]
    balance                         // [balance, 0, 0, 0, 0]
    caller                          // [msg.sender, balance, 0, 0, 0, 0]
    gas                             // [gas, msg.sender, balance, 0, 0, 0, 0]
    call                            // [bool]
    iszero                          // [bool]
    is_zero                         // []
    jumpi

    stop

    // Revert if call failed
    is_zero:
        0x00                        // [0]
        0x00                        // [0, 0]
        revert
}

/// @notice Get the balance of an allocator
/// @param {allocator} [address] - The allocator to get the balance of
#define macro ALLOCATOR_BALANCE() = takes (0) returns (0) {
    0x04 calldataload               // [allocator]
    GET_SLOT_FROM_KEY(0x00)         // [slot]
    sload                           // [balance]
    0x00                            // [0, balance]
    mstore                          // []

    // Return the balance
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

///////////////////
/// CONSTRUCTOR ///
///////////////////

/// @notice Constructor
/// @dev Sets `msg.sender` as the owner
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x20                            // [size] - Byte size to copy  
    0x20                            // [offset, size] - Offset in the code to copy from  
    codesize                        // [size, offset, size] - Byte size of the code
    sub                             // [size]
    0x00                            // [0, size] - Offset in memory to copy to
    codecopy                        // []

    0x00                            // [0]
    mload                           // [owner]
    [OWNER_SLOT]                    // [slot, owner]
    sstore                          // []
}

////////////////////////
/// MAIN ENTRY POINT ///
////////////////////////

/// @notice Main entry point
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00                            // [0]
    calldataload                    // [sig, 0]
    0xE0                            // [224, sig, 0]
    shr                             // [sel, 0]

    // Jump to the function depending on the selector
    dup1 __FUNC_SIG(allocations) eq allocationsJump jumpi
    dup1 __FUNC_SIG(owner) eq ownerJump jumpi
    dup1 __FUNC_SIG(Fal1out) eq Fal1outJump jumpi
    dup1 __FUNC_SIG(allocate) eq allocateJump jumpi
    dup1 __FUNC_SIG(sendAllocation) eq sendAllocationJump jumpi
    dup1 __FUNC_SIG(collectAllocations) eq collectAllocationsJump jumpi
    dup1 __FUNC_SIG(allocatorBalance) eq allocatorBalanceJump jumpi

    // Revert if the function is not found
    0x00                            // [0]
    0x00                            // [0, 0]
    revert      

    allocationsJump:
        ALLOCATIONS()

    ownerJump:
        OWNER()
    
    Fal1outJump:
        FAL1OUT()
    
    allocateJump:
        ALLOCATE()
    
    sendAllocationJump:
        SEND_ALLOCATION()
    
    collectAllocationsJump:
        COLLECT_ALLOCATIONS()
    
    allocatorBalanceJump:
        ALLOCATOR_BALANCE()
}   
