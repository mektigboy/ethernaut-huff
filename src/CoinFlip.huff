/// @title CoinFlip
/// @notice SPDX-License-Identifier: MIT
/// @author mektigboy

/////////////////
/// INTERFACE ///
/////////////////

#define function consecutiveWins() view returns (uint256)
#define function flip(bool) nonpayable returns (bool)
#define function lastHash() view returns (uint256)

///////////////
/// STORAGE ///
///////////////

#define constant CONSECUTIVE_WINS_SLOT = FREE_STORAGE_POINTER()
#define constant LAST_HASH_SLOT = FREE_STORAGE_POINTER()
#define constant FACTOR = 0x8000000000000000000000000000000000000000000000000000000000000000

//////////////////////
/// CONTRACT LOGIC ///
//////////////////////

/// @notice Get the number of consecutive wins
/// @return The number of consecutive wins
#define macro CONSECUTIVE_WINS() = takes (0) returns (0) {
    // Copy the number of consecutive wins to memory
    [CONSECUTIVE_WINS_SLOT]         // [slot]
    sload                           // [consecutiveWins]
    0x00                            // [0, consecutiveWins]       
    mstore                          // []

    // Return the number of consecutive wins
    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

///////////////////
/// ! TEMPORARY ///
///////////////////

#define macro LAST_HASH() = takes (0) returns (0) {
    [LAST_HASH_SLOT]                // [slot]
    sload                           // [lastHash]
    0x00                            // [0, lastHash]       
    mstore                          // []

    0x20                            // [32]
    0x00                            // [0, 32]
    return
}

/// @notice Flip the coin
/// @param {guess} [bool] - The guess
/// @return {result} [bool] - The result
#define macro FLIP() = takes (0) returns (0) {
    0x01                           // [1]
    number                         // [blockNumber, 1]
    sub                            // [blockNumber]
    blockhash                      // [blockHash]
    dup1                           // [blockHash, blockHash]
    dup1                           // [blockNumber, blockHash, blockHash]
    [LAST_HASH_SLOT]               // [slot, blockHash, blockHash, blockHash]
    dup1                           // [slot, slot, blockHash, blockHash, blockHash]
    sload                          // [lastHash, slot, blockHash, blockHash, blockHash]
    swap1                          // [slot, lastHash, blockHash, blockHash, blockHash
    swap2                          // [blockHash, lastHash, slot, blockHash, blockHash]
    eq                             // [bool, slot, blockHash, blockHash]
    is_equal                       // [slot, blockHash, blockHash]
    jumpi

    sstore                         // [blockHash]
    [FACTOR]
    [FACTOR]                       // [factor, blockHash]
    div                            // [result]
    0x01                           // [1, result]
    eq                             // [bool]
    is_one                         // []
    jumpi
    
    0x20
    0x00
    return

    is_equal:
        0x00                       // [0]
        0x00                       // [0, 0]
        revert

    is_one:
        0x01
        0x00
        mstore
        jumpi
        // 0x20
        // 0x00
        // return

}

////////////////////////
/// MAIN ENTRY POINT ///
////////////////////////

/// @notice Main entry point
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called
    0x00                            // [0]
    calldataload                    // [sig, 0]
    0xE0                            // [224, sig, 0]
    shr                             // [sel, 0]

    // Jump to the function depending on the selector
    dup1 __FUNC_SIG(consecutiveWins) eq consecutiveWinsJump jumpi
    dup1 __FUNC_SIG(flip) eq flipJump jumpi
    dup1 __FUNC_SIG(lastHash) eq lastHashJump jumpi

    // Revert if the function is not found
    0x00                            // [0]
    0x00                            // [0, 0]
    revert

    // Function jump destinations
    consecutiveWinsJump:
        CONSECUTIVE_WINS()
    
    flipJump:
        FLIP()

    lastHashJump:
        LAST_HASH()
}
